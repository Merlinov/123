package db

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"reflect"
	"time"

	"tg45/logs"
)

// SaveCurrentValuesContext - –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º context handling
func SaveCurrentValuesContext[T any](
	ctx context.Context,
	db *sql.DB,
	data T,
	timeStampSystem, timeStampFile time.Time,
	quality int,
	logger *log.Logger,
	logMode string,
) (err error) {
	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("panic –≤ SaveCurrentValuesContext: %v", r)
		}
	}()

	// üîß –ò–°–ü–†–ê–í–õ–ï–ù reflection –¥–ª—è —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
	v := reflect.ValueOf(data)
	t := reflect.TypeOf(data)

	if v.Kind() == reflect.Ptr {
		if v.IsNil() {
			return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω nil pointer")
		}
		v = v.Elem()
		t = t.Elem() // üîß –í–ê–ñ–ù–û: —Ç–∏–ø —Ç–æ–∂–µ –Ω—É–∂–Ω–æ "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
	}

	// üîß –î–û–ë–ê–í–ò–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ –¥–ª—è atomic –æ–ø–µ—Ä–∞—Ü–∏–π
	tx, err := db.BeginTx(ctx, nil)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	successCount := 0
	for i := 0; i < v.NumField(); i++ {
		field := t.Field(i)
		value := v.Field(i)

		if value.Kind() == reflect.Float32 {
			idTag := field.Tag.Get("idTag")
			if idTag == "" {
				continue
			}
			val := value.Float()

			// üîß –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô CONTEXT, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤ —Ü–∏–∫–ª–µ
			res, err := tx.ExecContext(ctx,
				"UPDATE CurrentValue SET Value=@p1, Quality=@p5, timeStampSystem=@p2, TimeStamp=@p3 WHERE IdTag=@p4",
				val, timeStampSystem, timeStampFile, idTag, quality,
			)
			if err != nil {
				logs.LogWriteAttempt(logger, idTag, "UPDATE_FAIL", err, logMode)
				return fmt.Errorf("–æ—à–∏–±–∫–∞ UPDATE IdTag=%s: %w", idTag, err)
			}

			rows, err := res.RowsAffected()
			if err != nil {
				logs.LogWriteAttempt(logger, idTag, "ROWSAFFECTED_FAIL", err, logMode)
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RowsAffected –¥–ª—è IdTag=%s: %w", idTag, err)
			}

			if rows == 0 {
				// üîß –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ context –≤–æ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
				_, err := tx.ExecContext(ctx,
					"INSERT INTO CurrentValue (IdTag, Value, timeStampSystem, TimeStamp, Quality) VALUES (@p1, @p2, @p3, @p4, @p5)",
					idTag, val, timeStampSystem, timeStampFile, quality,
				)
				if err != nil {
					logs.LogWriteAttempt(logger, idTag, "INSERT_FAIL", err, logMode)
					return fmt.Errorf("–æ—à–∏–±–∫–∞ INSERT IdTag=%s: %w", idTag, err)
				}
				logs.LogWriteAttempt(logger, idTag, "INSERT_SUCCESS", nil, logMode)
			} else {
				logs.LogWriteAttempt(logger, idTag, "UPDATE_SUCCESS", nil, logMode)
			}

			// üîß Data —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–∂–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
			_, err = tx.ExecContext(ctx,
				"INSERT INTO Data (IdTag, Value, TimeStamp, TimeStampSystem, Quality) VALUES (@p1, @p2, @p3, @p4, @p5)",
				idTag, val, timeStampFile, timeStampSystem, quality,
			)
			if err != nil {
				logs.LogWriteAttempt(logger, idTag, "DATA_INSERT_FAIL", err, logMode)
				// üîß –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è Data —Ç–∞–±–ª–∏—Ü—ã - –æ–Ω–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
			} else {
				logs.LogWriteAttempt(logger, idTag, "DATA_INSERT_SUCCESS", nil, logMode)
			}

			successCount++
		}
	}

	// üîß –ö–û–ú–ú–ò–¢–ò–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}

	if logMode == "all" {
		logger.Printf("–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –∑–Ω–∞—á–µ–Ω–∏–π", successCount)
	}

	return nil
}


