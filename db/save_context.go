package db

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"reflect"
	"sort"
	"strings"
	"time"

	"tg45/logs"
)

// FieldData –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π –ø–æ IdTag (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ deadlock)
type FieldData struct {
	IdTag string
	Value float64
	Field reflect.StructField
}

// SaveCurrentValuesContext - —Å UPSERT, deadlock retry –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
func SaveCurrentValuesContext[T any](
	ctx context.Context,
	db *sql.DB,
	data T,
	timeStampSystem, timeStampFile time.Time,
	quality int,
	logger *log.Logger,
	logMode string,
) (err error) {
	// üîß DEADLOCK RETRY LOGIC
	maxRetries := 3
	for attempt := 0; attempt <= maxRetries; attempt++ {
		err = saveWithTransaction(ctx, db, data, timeStampSystem, timeStampFile, quality, logger, logMode)

		if err == nil {
			return nil // –£—Å–ø–µ—Ö!
		}

		// üîß –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê DEADLOCK ERROR
		if isDeadlockError(err) && attempt < maxRetries {
			backoffDelay := time.Duration(50*(attempt+1)) * time.Millisecond // 50ms, 100ms, 150ms
			if logMode == "all" {
				logger.Printf("DEADLOCK –æ–±–Ω–∞—Ä—É–∂–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ %d/%d), –∂–¥–µ–º %v: %v",
					attempt+1, maxRetries+1, backoffDelay, err)
			}

			// üîß –õ–û–ì–ò–†–£–ï–ú DEADLOCK –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
			logs.LogWriteAttempt(logger, "SYSTEM", "DEADLOCK_RETRY", err, logMode)

			time.Sleep(backoffDelay)
			continue
		}

		// –ù–µ deadlock –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ø–æ–ø—ã—Ç–∫–∏
		break
	}

	return err
}

// isDeadlockError –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ deadlock
func isDeadlockError(err error) bool {
	if err == nil {
		return false
	}
	errStr := strings.ToLower(err.Error())
	return strings.Contains(errStr, "was deadlocked") ||
		strings.Contains(errStr, "deadlock victim") ||
		strings.Contains(errStr, "transaction (process id")
}

// saveWithTransaction - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è deadlock
func saveWithTransaction[T any](
	ctx context.Context,
	db *sql.DB,
	data T,
	timeStampSystem, timeStampFile time.Time,
	quality int,
	logger *log.Logger,
	logMode string,
) (err error) {
	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("panic –≤ saveWithTransaction: %v", r)
		}
	}()

	v := reflect.ValueOf(data)
	t := reflect.TypeOf(data)

	if v.Kind() == reflect.Ptr {
		if v.IsNil() {
			return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω nil pointer")
		}
		v = v.Elem()
		t = t.Elem()
	}

	tx, err := db.BeginTx(ctx, nil)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()

	// –í—ã–±–∏—Ä–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	var dataTable string
	typeName := t.Name()
	switch typeName {
	case "Data_TG4":
		dataTable = "ByMinutes"
	case "Data_TG5_Minute":
		dataTable = "ByMinutes"
	case "Data_TG5_Hour":
		dataTable = "ByHours"
	default:
		dataTable = "ByMinutes"
	}

	// üîß –°–û–ë–ò–†–ê–ï–ú –í–°–ï –ü–û–õ–Ø –ò –°–û–†–¢–ò–†–£–ï–ú –ü–û IdTag –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø DEADLOCK
	var fields []FieldData
	for i := 0; i < v.NumField(); i++ {
		field := t.Field(i)
		value := v.Field(i)

		if value.Kind() == reflect.Float32 {
			idTag := field.Tag.Get("idTag")
			if idTag == "" {
				continue
			}

			fields = append(fields, FieldData{
				IdTag: idTag,
				Value: value.Float(),
				Field: field,
			})
		}
	}

	// üîß –°–û–†–¢–ò–†–£–ï–ú –ü–û IdTag –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø DEADLOCK
	sort.Slice(fields, func(i, j int) bool {
		return fields[i].IdTag < fields[j].IdTag
	})

	// üîß –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –í –£–ü–û–†–Ø–î–û–ß–ï–ù–ù–û–ú –í–ò–î–ï
	successCount := 0
	for _, fieldData := range fields {
		// üîß UPSERT –¥–ª—è CurrentValue —Å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
		currentValueQuery := `
MERGE CurrentValue WITH (UPDLOCK, SERIALIZABLE) AS target
USING (VALUES (@p1)) AS source (IdTag)
ON target.IdTag = source.IdTag
WHEN MATCHED THEN 
    UPDATE SET Value = @p2, Quality = @p3, timeStampSystem = @p4, TimeStamp = @p5
WHEN NOT MATCHED THEN 
    INSERT (IdTag, Value, Quality, timeStampSystem, TimeStamp)
    VALUES (@p1, @p2, @p3, @p4, @p5);`

		_, err := tx.ExecContext(ctx, currentValueQuery,
			fieldData.IdTag, fieldData.Value, quality, timeStampSystem, timeStampFile)
		if err != nil {
			logs.LogWriteAttempt(logger, fieldData.IdTag, "CURRENTVALUE_UPSERT_FAIL", err, logMode)
			return fmt.Errorf("–æ—à–∏–±–∫–∞ UPSERT CurrentValue IdTag=%s: %w", fieldData.IdTag, err)
		}
		logs.LogWriteAttempt(logger, fieldData.IdTag, "CURRENTVALUE_UPSERT_SUCCESS", nil, logMode)

		// üîß UPSERT –¥–ª—è –∞—Ä—Ö–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
		archiveQuery := fmt.Sprintf(`
MERGE %s WITH (UPDLOCK, SERIALIZABLE) AS target
USING (VALUES (@p1, @p2)) AS source (IdTag, TimeStamp)
ON target.IdTag = source.IdTag AND target.TimeStamp = source.TimeStamp
WHEN MATCHED THEN 
    UPDATE SET Value = @p3, Quality = @p4, timeStampSystem = @p5
WHEN NOT MATCHED THEN 
    INSERT (IdTag, TimeStamp, Value, Quality, timeStampSystem)
    VALUES (@p1, @p2, @p3, @p4, @p5);`, dataTable)

		// üîß –î–û–ë–ê–í–¨ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
		if logMode == "all" {
			logger.Printf("[DEBUG] –í—ã–ø–æ–ª–Ω—è–µ–º MERGE –≤ %s –¥–ª—è IdTag=%s, TimeStamp=%v",
				dataTable, fieldData.IdTag, timeStampFile)
		}

		_, err = tx.ExecContext(ctx, archiveQuery,
			fieldData.IdTag, timeStampFile, fieldData.Value, quality, timeStampSystem)
		if err != nil {
			// üîß –î–û–ë–ê–í–¨ –ë–û–õ–ï–ï –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–ö–ò
			logger.Printf("[ERROR] MERGE –≤ %s failed –¥–ª—è IdTag=%s: %v", dataTable, fieldData.IdTag, err)
			logs.LogWriteAttempt(logger, fieldData.IdTag, fmt.Sprintf("%s_UPSERT_FAIL", dataTable), err, logMode)
			// –ù–ï —Ä–æ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ä—Ö–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
		} else {
			if logMode == "all" {
				logger.Printf("[DEBUG] MERGE –≤ %s —É—Å–ø–µ—à–Ω–æ –¥–ª—è IdTag=%s", dataTable, fieldData.IdTag)
			}
			logs.LogWriteAttempt(logger, fieldData.IdTag, fmt.Sprintf("%s_UPSERT_SUCCESS", dataTable), nil, logMode)
		}

		successCount++
	}

	if err := tx.Commit(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}

	if logMode == "all" {
		logger.Printf("UPSERT –∑–∞–≤–µ—Ä—à–µ–Ω: %d –∑–Ω–∞—á–µ–Ω–∏–π –≤ %s", successCount, dataTable)
	}

	return nil
}

