package datafile

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"os"
	"unsafe"
)

// ReadData —á–∏—Ç–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –≤ –ª—é–±—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç panic
func ReadData[T any](filename string) (result T, err error) {
	// üõ°Ô∏è PANIC RECOVERY
	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("panic –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ %s: %v", filename, r)
		}
	}()

	file, err := os.Open(filename)
	if err != nil {
		return
	}
	defer file.Close()

	fileInfo, err := file.Stat()
	if err != nil {
		return
	}

	fileSize := fileInfo.Size()
	expectedSize := int64(unsafe.Sizeof(result))

	// –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞, –Ω–æ –æ—Ç –Ω–∞–º –º–µ–Ω—å—à–µ —Å—á–∏—Ç–∞–µ—Ç ((
	if fileSize < expectedSize-100 || fileSize > expectedSize+100 {
		err = fmt.Errorf("—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ %d –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É %d (–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å ¬±100)",
			fileSize, expectedSize)
		return
	}

	// –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
	if fileSize < expectedSize {
		// –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä —Ä–∞–∑–º–µ—Ä–æ–º —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –Ω—É–ª—è–º–∏
		buffer := make([]byte, expectedSize)
		var n int
		n, err = file.Read(buffer[:fileSize])
		if err != nil {
			return
		}

		// –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ù–û–¢–´ –ß–¢–ï–ù–ò–Ø
		if int64(n) != fileSize {
			err = fmt.Errorf("–Ω–µ–ø–æ–ª–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å %d, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ %d", fileSize, n)
			return
		}

		// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
		err = binary.Read(bytes.NewReader(buffer), binary.LittleEndian, &result)
		return
	}

	// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç
	err = binary.Read(file, binary.LittleEndian, &result)
	return
}
