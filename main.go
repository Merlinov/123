package main

import (
	"context"
	"errors"
	"fmt"
	"image/color"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"strings"
	"sync"
	"syscall"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/driver/desktop"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"github.com/sasha-s/go-deadlock"
	"github.com/skratchdot/open-golang/open"
	"gopkg.in/natefinch/lumberjack.v2"

	"tg45/runner"
	"tg45/source"

	_ "github.com/denisenkom/go-mssqldb"
)

const (
	AppTitle      = "–§–∞–π–ª–æ–æ–±–º–µ–Ω –¢–≠–¶"
	ConfigPath    = "config.json"
	IconPath      = "icon.png"
	WindowWidth   = 900
	WindowHeight  = 700
	WatchInterval = 5 * time.Second
	StatusStopped = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	StatusRunning = "–ó–∞–ø—É—â–µ–Ω"
	ButtonStart   = "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
	ButtonStop    = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
)

type AppManager struct {
	configPath    string
	cfg           runner.Config
	sourceManager *source.Manager
	content       *fyne.Container
	myWindow      fyne.Window
	configValid   bool
	mutex         sync.RWMutex // ‚Üê –î–û–ë–ê–í–õ–Ø–ï–ú mutex
	// UI —ç–ª–µ–º–µ–Ω—Ç—ã
	errorLabel       *widget.Label
	reloadButton     *widget.Button
	editConfigButton *widget.Button
	// –ø–æ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	healthMonitorRunning bool
	healthTicker         *time.Ticker
	ctx                  context.Context
	cancelFunc           context.CancelFunc
	startTime            time.Time
	healthMetrics        *HealthMetrics
	appLogger            *log.Logger
}

func main() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (–ø–æ—á–µ–º—É —Ç–æ 2 –≤–∏—Å–∏—Ç)
	singleInstance := NewSingleInstance("TG45DataCollector")
	locked, err := singleInstance.Lock()
	if err != nil || !locked {
		tempApp := app.New()
		tempWindow := tempApp.NewWindow("–û—à–∏–±–∫–∞")
		tempWindow.Resize(fyne.NewSize(400, 200))

		var errorMsg string
		if err != nil {
			errorMsg = fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: %v", err)
		} else {
			errorMsg = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á."
		}

		dialog.ShowError(errors.New(errorMsg), tempWindow)
		tempWindow.ShowAndRun()
		os.Exit(1)
	} // üîß –î–û–ë–ê–í–¨ GRACEFUL CLEANUP
	defer func() {
		if err := singleInstance.Release(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: %v", err)
		}
	}()

	// üîß SIGNAL HANDLING –¥–ª—è graceful shutdown
	go func() {
		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
		<-sigChan
		log.Println("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
		os.Exit(0) // defer –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	}()–ø–æ–Ω

	myApp := app.New()
	myWindow := myApp.NewWindow(AppTitle)
	myWindow.Resize(fyne.NewSize(WindowWidth, WindowHeight))

	if icon, err := fyne.LoadResourceFromPath(IconPath); err == nil {
		myWindow.SetIcon(icon)
	}
	ctx, cancel := context.WithCancel(context.Background())

	appManager := &AppManager{
		configPath:    ConfigPath,
		myWindow:      myWindow,
		configValid:   false,
		ctx:           ctx,
		cancelFunc:    cancel,
		startTime:     time.Now(),
		sourceManager: source.NewManager(),
	}
	// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	appManager.run()
}

func (am *AppManager) initAppLogger() {
	var maxSize int
	switch am.cfg.LogMode {
	case "all":
		maxSize = 50 // –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤ = –±–æ–ª—å—à–µ —Ñ–∞–π–ª—ã
	case "errors":
		maxSize = 10 // –º–µ–Ω—å—à–µ –ª–æ–≥–æ–≤ = –º–µ–Ω—å—à–µ —Ñ–∞–π–ª—ã
	default:
		maxSize = 20
	}

	am.appLogger = log.New(&lumberjack.Logger{
		Filename:   "app.log",
		MaxSize:    maxSize,
		MaxBackups: 3,
		MaxAge:     30,
		Compress:   true,
	}, "[APP] ", log.LstdFlags)

	am.appLogger.Printf("Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å LogMode: %s (MaxSize: %dMB)", am.cfg.LogMode, maxSize)
}

// –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π logger –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
func (am *AppManager) initDefaultLogger() {
	am.appLogger = log.New(&lumberjack.Logger{
		Filename:   "app.log",
		MaxSize:    20,
		MaxBackups: 3,
		MaxAge:     30,
		Compress:   true,
	}, "[APP] ", log.LstdFlags)

	am.appLogger.Println("Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–∫–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)")
}

// –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (am *AppManager) run() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HealthMetrics
	am.healthMetrics = &HealthMetrics{
		StartTime: time.Now(),
		mutex:     deadlock.RWMutex{},
	}

	am.initializeUI()
	am.reloadConfig()

	if am.configValid {
		am.initAppLogger()
	} else {
		am.initDefaultLogger()
	}

	go am.configWatcher()

	// –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π (—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ —Ç—Ä–µ–π, –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–∞–º)
	if desk, ok := fyne.CurrentApp().(desktop.App); ok {
		menu := fyne.NewMenu("TG45 –¢–≠–¶",
			fyne.NewMenuItem("–ü–æ–∫–∞–∑–∞—Ç—å", func() {
				am.myWindow.Show()
				am.myWindow.RequestFocus()
			}),
			fyne.NewMenuItem("–°—Ç–∞—Ç—É—Å", func() {
				am.showStatusDialog()
			}),
			fyne.NewMenuItemSeparator(),
			fyne.NewMenuItem("–°–∫—Ä—ã—Ç—å –≤ —Ç—Ä–µ–π", func() {
				am.myWindow.Hide()
			}),
			fyne.NewMenuItem("–ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥", func() {
				am.shutdown()
			}),
		)
		desk.SetSystemTrayMenu(menu)
	}

	am.myWindow.SetCloseIntercept(func() {
		am.myWindow.Hide()
	})
	//–º–æ–∂–Ω–æ –µ—â–µ –Ω–∞ ctrl-Q –∑–∞–≤–µ—Ä—à–∏—Ç—å, –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
	ctrlQ := &desktop.CustomShortcut{KeyName: fyne.KeyQ, Modifier: fyne.KeyModifierControl}
	am.myWindow.Canvas().AddShortcut(ctrlQ, func(shortcut fyne.Shortcut) {
		am.shutdown()
	})

	// üéØ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ü–ï–†–ï–î ShowAndRun
	if am.configValid && am.cfg.StartAllOnLaunch {
		go func() {
			select {
			case <-am.ctx.Done():
				return // Graceful shutdown
			case <-time.After(1 * time.Second):
				am.delayedAutostart()
			}
		}()
	}

	am.myWindow.ShowAndRun() // ‚Üê –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –í–´–ó–û–í
}

// –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
func (am *AppManager) delayedAutostart() {
	// –ñ–¥–µ–º —á—Ç–æ–±—ã UI —É—Å–ø–µ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è
	time.Sleep(1 * time.Second)

	am.logToApp("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ - –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
	if err := am.sourceManager.StartAll(); err != nil {
		am.logCriticalEvent(fmt.Sprintf("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: %v", err))
	} else {
		am.logToApp("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∫–Ω–æ–ø–æ–∫
	fyne.Do(func() {
		am.clearSourcesFromUI()
		am.updateSourcesUI()
	})
}

func (am *AppManager) logToApp(message string) {
	if am.appLogger != nil {
		am.appLogger.Println(message)
	} else {
		log.Println("[FALLBACK]", message)
	}
}

// –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
func (am *AppManager) showStatusDialog() {
	status := "–°—Ç–∞—Ç—É—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n\n"

	runners := am.sourceManager.GetRunners()
	for _, runner := range runners {
		runStatus := "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
		if runner.IsRunning() {
			runStatus = "–ó–∞–ø—É—â–µ–Ω"
		}
		status += fmt.Sprintf("‚Ä¢ %s: %s\n", runner.Source.Name, runStatus)
	}

	dialog.ShowInformation("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", status, am.myWindow)
}

func (am *AppManager) getSafeLogMode() string {
	am.mutex.RLock()
	logMode := am.cfg.LogMode
	am.mutex.RUnlock()
	return logMode
}

// –í shutdown:
func (am *AppManager) shutdown() {
	am.logToApp("–ù–∞—á–∏–Ω–∞–µ–º shutdown...")
	am.stopHealthMonitoring()

	// üîß –î–û–ë–ê–í–¨ –û–ß–ò–°–¢–ö–£ HealthMetrics
	if am.healthMetrics != nil {
		am.healthMetrics.mutex.Lock()
		am.healthMetrics = nil
		am.healthMetrics.mutex.Unlock()
	}

	if am.cancelFunc != nil {
		am.cancelFunc()
	}

	time.Sleep(1 * time.Second)
	am.closeOldSources()

	am.logToApp("Shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
	fyne.CurrentApp().Quit()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ü–≤–µ—Ç–æ–º
func createCustomColorButton(text string, bgColor color.Color, textColor color.Color, onTapped func()) fyne.CanvasObject {
	button := widget.NewButton(text, onTapped)

	customTheme := &customButtonTheme{
		buttonColor: bgColor,
		textColor:   textColor,
	}

	return container.NewThemeOverride(button, customTheme)
}

// customButtonTheme - –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏
// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Ü–≤–µ—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø customButtonTheme
type customButtonTheme struct {
	buttonColor color.Color
	textColor   color.Color
}

func (t *customButtonTheme) Color(name fyne.ThemeColorName, variant fyne.ThemeVariant) color.Color {
	switch name {
	// –ü–†–ê–í–ò–õ–¨–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤ Fyne:
	case theme.ColorNameButton:
		return t.buttonColor
	case theme.ColorNameForeground:
		return t.textColor
	default:
		return theme.DefaultTheme().Color(name, variant)
	}
}

func (t *customButtonTheme) Font(style fyne.TextStyle) fyne.Resource {
	return theme.DefaultTheme().Font(style)
}

func (t *customButtonTheme) Icon(name fyne.ThemeIconName) fyne.Resource {
	return theme.DefaultTheme().Icon(name)
}

func (t *customButtonTheme) Size(name fyne.ThemeSizeName) float32 {
	return theme.DefaultTheme().Size(name)
}

// initializeUI —Å–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
func (am *AppManager) initializeUI() {
	am.content = container.NewVBox()

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	title := widget.NewLabel(AppTitle)
	title.TextStyle = fyne.TextStyle{Bold: true}
	am.content.Add(title)
	am.content.Add(widget.NewSeparator())

	// –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	am.errorLabel = widget.NewLabel("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
	am.errorLabel.TextStyle = fyne.TextStyle{Italic: true}
	am.content.Add(am.errorLabel)

	// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π - –í–°–ï–ì–î–ê –¥–æ—Å—Ç—É–ø–Ω—ã
	am.reloadButton = widget.NewButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", func() {
		am.reloadConfig()
	})

	am.editConfigButton = widget.NewButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", func() {
		am.showConfigEditor()
	})

	configButtons := container.NewHBox(am.reloadButton, am.editConfigButton)
	am.content.Add(configButtons)
	am.content.Add(widget.NewSeparator())

	am.myWindow.SetContent(container.NewVScroll(am.content))
}

// reloadConfig –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI
func (am *AppManager) reloadConfig() {
	am.mutex.Lock()
	defer am.mutex.Unlock()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	var runningStates map[string]bool
	if am.sourceManager != nil {
		runningStates = am.sourceManager.GetStatus()
	} else {
		runningStates = make(map[string]bool)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	am.stopHealthMonitoring()

	// –û—á–∏—â–∞–µ–º UI
	am.clearSourcesFromUI()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(am.configPath); errors.Is(err, os.ErrNotExist) {
		am.configValid = false
		am.errorLabel.SetText("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
		am.showConfigExample()
		return
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
	cfg, err := runner.LoadConfig(am.configPath)
	if err != nil {
		am.configValid = false
		am.errorLabel.SetText(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: %v", err))
		return
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
	if err := am.validateConfig(cfg); err != nil {
		am.configValid = false
		am.errorLabel.SetText(fmt.Sprintf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: %v", err))
		return
	}

	// –ö–æ–Ω—Ñ–∏–≥ –≤–∞–ª–∏–¥–Ω—ã–π
	am.cfg = cfg
	am.configValid = true
	am.errorLabel.SetText("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
	if err := am.sourceManager.CreateControls(cfg); err != nil {
		am.errorLabel.SetText(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤: %v", err))
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º UI
	am.updateSourcesUI()
	am.startHealthMonitoring()

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
	runners := am.sourceManager.GetRunners()
	for _, runner := range runners {
		if wasRunning, exists := runningStates[runner.Source.Name]; exists && wasRunning {
			runner.Start(am.cfg.LogMode)
		}
	}

	// // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
	// if len(runningStates) == 0 && am.configValid && am.cfg.StartAllOnLaunch {
	// 	//am.appLogger.Println("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ - –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
	// 	am.sourceManager.StartAll()
	// 	//am.appLogger.Println("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
	// }
}

func (am *AppManager) startHealthMonitoring() {
	if !am.configValid || am.healthMonitorRunning {
		return
	}

	am.healthMonitorRunning = true
	am.healthTicker = time.NewTicker(30 * time.Second)

	go func() {
		defer func() {
			am.healthMonitorRunning = false
			if am.healthTicker != nil {
				am.healthTicker.Stop()
			}
			am.appLogger.Println("HealthMonitoring: –≥–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
		}()

		for {
			select {
			case <-am.ctx.Done(): // –î–û–ë–ê–í–¨ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
				am.appLogger.Println("HealthMonitoring: –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
				return
			case <-am.healthTicker.C:
				am.checkSourcesHealth()
			}
		}
	}()
}

func (am *AppManager) checkSourcesHealth() {
	//–¥–æ–±–∞–≤—å –ø—Ä–æ–≤–µ—Ä–∫—É context
	select {
	case <-am.ctx.Done():
		return
	default:
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º
	}
	runners := am.sourceManager.GetRunners()
	if len(runners) == 0 {
		return
	}

	for _, runner := range runners {
		if runner == nil {
			continue
		}

		currentlyRunning := runner.IsRunning()

		if _, err := os.Stat(runner.Source.DataFileName); os.IsNotExist(err) {
			am.logCriticalEvent(fmt.Sprintf("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %s", runner.Source.DataFileName))
			if currentlyRunning {
				runner.Stop()
				// –ü–†–û–í–ï–†–ö–ê CONTEXT –≤ fyne.Do –∞ —Ç–æ –∫–Ω–æ–ø–æ—á–∫–∏ –ø—Ä–∏—É–Ω—ã–ª–∏
				fyne.Do(func() {
					select {
					case <-am.ctx.Done():
						return // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ shutdown
					default:
						am.updateAllButtonColors()
					}
				})
			}
			continue
		}

		if !currentlyRunning {
			am.logCriticalEvent(fmt.Sprintf("–ò—Å—Ç–æ—á–Ω–∏–∫ %s –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è", runner.Source.Name))
		}
	}
}

func (am *AppManager) stopHealthMonitoring() {
	if am.healthTicker != nil {
		am.healthTicker.Stop()
		am.healthMonitorRunning = false
		am.healthTicker = nil
	}
}

func (am *AppManager) closeOldSources() {
	if am.sourceManager != nil {
		am.sourceManager.Close()
	}
}

// createStyledButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
// func createStyledButton(text string, bgColor color.Color, onTapped func()) fyne.CanvasObject {
// 	button := widget.NewButton(text, onTapped)

// 	// –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫–∞–∫ —Ñ–æ–Ω
// 	bgRect := canvas.NewRectangle(bgColor)

// 	// –ü–æ–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä—Ö —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
// 	return container.NewStack(bgRect, button)
// }

// updateSourcesUI –æ–±–Ω–æ–≤–ª—è–µ—Ç UI —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
func (am *AppManager) updateSourcesUI() {
	if !am.configValid {
		return
	}

	runners := am.sourceManager.GetRunners()

	if len(runners) == 0 {
		noSourcesLabel := widget.NewLabel("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É 'Enabled' –≤ config.json")
		am.content.Add(noSourcesLabel)
	} else {
		gridContainer := container.New(layout.NewGridLayout(4))

		// –ó–∞–≥–æ–ª–æ–≤–∫–∏
		gridContainer.Add(widget.NewLabelWithStyle("–ò—Å—Ç–æ—á–Ω–∏–∫", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}))
		gridContainer.Add(widget.NewLabelWithStyle("–°—Ç–∞—Ç—É—Å", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}))
		gridContainer.Add(widget.NewLabelWithStyle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", fyne.TextAlignCenter, fyne.TextStyle{Bold: true}))
		gridContainer.Add(widget.NewLabelWithStyle("–õ–æ–≥–∏", fyne.TextAlignCenter, fyne.TextStyle{Bold: true}))

		// –î–∞–Ω–Ω—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
		for _, runner := range runners {
			currentRunner := runner
			gridContainer.Add(widget.NewLabel(runner.Source.Name))

			// –°—Ç–∞—Ç—É—Å
			statusText := fmt.Sprintf("%s: %s", runner.Source.Name, StatusStopped)
			if runner.IsRunning() {
				statusText = fmt.Sprintf("%s: %s", runner.Source.Name, StatusRunning)
			}
			statusLabel := widget.NewLabel(statusText)
			gridContainer.Add(statusLabel)

			// –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
			var styledButton fyne.CanvasObject
			if runner.IsRunning() {
				styledButton = createCustomColorButton(ButtonStop,
					&color.NRGBA{R: 46, G: 125, B: 50, A: 255},
					&color.NRGBA{R: 255, G: 255, B: 255, A: 255},
					func() {
						am.toggleRunner(currentRunner)
					})
			} else {
				styledButton = createCustomColorButton(ButtonStart,
					&color.NRGBA{R: 233, G: 30, B: 99, A: 255},
					&color.NRGBA{R: 255, G: 255, B: 255, A: 255},
					func() {
						am.toggleRunner(currentRunner)
					})
			}
			gridContainer.Add(styledButton)
			// –ö–Ω–æ–ø–∫–∞ –ª–æ–≥–æ–≤
			logBtn := widget.NewButton("–õ–æ–≥", func() {
				if err := open.Run(runner.Source.LogFileName); err != nil {
					dialog.ShowError(err, am.myWindow)
				}
			})
			gridContainer.Add(logBtn)
		}

		am.content.Add(gridContainer)

		am.content.Add(widget.NewSeparator())

		startAllButton := widget.NewButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", func() {
			am.startAllSources()
			// –î–û–ë–ê–í–¨ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
			am.updateAllButtonColors()
		})

		stopAllButton := widget.NewButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", func() {
			am.stopAllSources()
			// –î–û–ë–ê–í–¨ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
			am.updateAllButtonColors()
		})

		generalControls := container.NewHBox(startAllButton, stopAllButton)
		am.content.Add(generalControls)

		am.content.Add(widget.NewSeparator())
		infoLabel := widget.NewLabel(fmt.Sprintf("–†–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: %s | –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: %s",
			am.cfg.LogMode, am.extractServerFromConnString(am.cfg.ConnString)))
		infoLabel.TextStyle = fyne.TextStyle{Italic: true}
		am.content.Add(infoLabel)
	}

	am.content.Refresh()
}

func (am *AppManager) toggleRunner(runner *runner.SourceRunner) {
	am.mutex.RLock()
	logMode := am.cfg.LogMode
	am.mutex.RUnlock()

	// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª–∏–∫–æ–º –æ–ø–µ—Ä–∞—Ü–∏—é toggle
	if runner.IsRunning() {
		runner.Stop()
		// –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
		fyne.Do(func() {
			am.updateAllButtonColors()
		})
	} else {
		runner.Start(logMode)
		// –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
		fyne.Do(func() {
			am.updateAllButtonColors()
		})
	}
}

// clearSourcesFromUI —É–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ UI
func (am *AppManager) clearSourcesFromUI() {
	newContent := container.NewVBox()

	// –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, —Å—Ç–∞—Ç—É—Å, –∫–Ω–æ–ø–∫–∏, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
	if len(am.content.Objects) >= 5 {
		for i := 0; i < 5; i++ {
			newContent.Add(am.content.Objects[i])
		}
	}

	am.content.Objects = newContent.Objects
	am.content.Refresh()
}

// configWatcher —Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (am *AppManager) configWatcher() {
	var lastModTime time.Time
	if stat, err := os.Stat(am.configPath); err == nil {
		lastModTime = stat.ModTime()
	}

	ticker := time.NewTicker(WatchInterval)
	defer ticker.Stop()

	for {
		select {
		case <-am.ctx.Done(): // –î–û–ë–ê–í–¨ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
			am.appLogger.Println("ConfigWatcher: –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
			return
		case <-ticker.C:
			if stat, err := os.Stat(am.configPath); err == nil {
				currentModTime := stat.ModTime()
				if !lastModTime.IsZero() && !lastModTime.Equal(currentModTime) {
					am.appLogger.Printf("Config file changed: %v -> %v\n", lastModTime, currentModTime)
					lastModTime = currentModTime
					time.Sleep(100 * time.Millisecond)

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
					select {
					case <-am.ctx.Done():
						return
					default:
						go func() {
							select {
							case <-am.ctx.Done():
								return
							case <-time.After(1 * time.Second):
								// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
								select {
								case <-am.ctx.Done():
									return
								default:
									am.reloadConfig()
								}
							}
						}()
					}
				} else if lastModTime.IsZero() {
					lastModTime = currentModTime
				}
			}
		}
	}
}

// startAllSources –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
func (am *AppManager) startAllSources() {
	if err := am.sourceManager.StartAll(); err != nil {
		am.logCriticalEvent(fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %v", err))
	}
}

// –º–µ—Ç—Ä–∏–∫–∏ –∏ health endpoint
type HealthMetrics struct {
	StartTime        time.Time
	TotalRestarts    int64
	LastError        string
	SuccessfulWrites int64
	FailedWrites     int64
	LastSuccessWrite time.Time
	mutex            deadlock.RWMutex
}

// –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
func (am *AppManager) logCriticalEvent(message string) {
	timestamp := time.Now().Format("2006-01-02 15:04:05")
	criticalLog := fmt.Sprintf("[CRITICAL] %s: %s\n", timestamp, message)

	f, err := os.OpenFile("critical.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ critical.log: %v", err)
		fmt.Print(criticalLog) // Fallback –≤ –∫–æ–Ω—Å–æ–ª—å
		return
	}
	defer f.Close()

	if _, err := f.WriteString(criticalLog); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: %v", err)
	}

	fmt.Print(criticalLog)
}

// stopAllSources –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
func (am *AppManager) stopAllSources() {
	if err := am.sourceManager.StopAll(); err != nil {
		am.logCriticalEvent(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %v", err))
	}
}

// updateAllButtonColors –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
func (am *AppManager) updateAllButtonColors() {
	// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
	fyne.Do(func() {
		am.clearSourcesFromUI()
		am.updateSourcesUI()
	})
}

// validateConfig –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (am *AppManager) validateConfig(cfg runner.Config) error {
	var missingFields []string
	if strings.TrimSpace(cfg.LogMode) == "" {
		missingFields = append(missingFields, "LogMode")
	}
	if strings.TrimSpace(cfg.ConnString) == "" {
		missingFields = append(missingFields, "ConnString")
	}
	if len(cfg.DataSources) == 0 {
		missingFields = append(missingFields, "DataSources")
	}

	if len(missingFields) > 0 {
		return fmt.Errorf("–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: %s", strings.Join(missingFields, ", "))
	}
	for _, source := range cfg.DataSources {
		if source.Enabled {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
			dataDir := filepath.Dir(source.DataFileName)
			if _, err := os.Stat(dataDir); os.IsNotExist(err) {
				return fmt.Errorf("–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è %s: %s", source.Name, dataDir)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
			logDir := filepath.Dir(source.LogFileName)
			if err := os.MkdirAll(logDir, 0755); err != nil {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –¥–ª—è %s: %v", source.Name, err)
			}
		}
	}
	return nil
}

// extractServerFromConnString –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func (am *AppManager) extractServerFromConnString(connString string) string {
	parts := strings.Split(connString, ";")
	for _, part := range parts {
		if strings.HasPrefix(strings.ToLower(part), "server=") {
			return strings.TrimPrefix(part, "server=")
		}
	}
	return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
}

// showConfigExample –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (am *AppManager) showConfigExample() {
	const exampleConfig = `{
  "LogMode": "errors",
  "ConnString": "server=10.211.55.7,1433;database=tec1new;user id=sa;password=VeryStr0ngP@ssw0rd;encrypt=disable",
  "StartAllOnLaunch": true,
  "DataSources": [
    {
      "Name": "TG4",
      "DataFileName": "C:/TECData/Station1/Tg4.dat",
      "ParserType": "tg4",
      "LogFileName": "C:/Logs/TEC/write_attempts_tg4.log",
      "Enabled": true,
      "Quality": 262336
    }
  ]
}`

	dialog.ShowInformation("–ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
		fmt.Sprintf("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª %s —Å —Ç–∞–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:\n\n%s", am.configPath, exampleConfig),
		am.myWindow)
}

// showConfigEditor –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (am *AppManager) showConfigEditor() {
	var data []byte

	if _, err := os.Stat(am.configPath); errors.Is(err, os.ErrNotExist) {
		// –§–∞–π–ª–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º —Å –ø—Ä–∏–º–µ—Ä–æ–º
		data = []byte(`{
  "LogMode": "errors",
  "ConnString": "server=10.211.55.7,1433;database=tec1new;user id=sa;password=VeryStr0ngP@ssw0rd;encrypt=disable",
  "StartAllOnLaunch": true,
  "DataSources": [
    {
      "Name": "TG4",
      "DataFileName": "Tg4.dat",
      "ParserType": "tg4",
      "LogFileName": "write_attempts_tg4.log",
      "Enabled": true
    }
  ]
}`)
	} else {
		// üîß –î–û–ë–ê–í–¨ –ü–†–û–í–ï–†–ö–£ –û–®–ò–ë–ö–ò
		var err error
		data, err = os.ReadFile(am.configPath)
		if err != nil {
			am.logCriticalEvent(fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err))
			return
		}
	}

	entry := widget.NewMultiLineEntry()
	entry.SetText(string(data))

	configWin := fyne.CurrentApp().NewWindow("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å config.json")
	configWin.Resize(fyne.NewSize(800, 600))

	//  –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ö–†–´–¢–ò–ï –û–ö–ù–ê –ü–†–ò SHUTDOWN
	go func() {
		<-am.ctx.Done()   // –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª shutdown
		configWin.Close() // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
	}()

	saveBtn := widget.NewButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", func() {
		err := os.WriteFile(am.configPath, []byte(entry.Text), 0o644)
		if err != nil {
			dialog.ShowError(err, configWin)
		} else {
			configWin.Close()
			dialog.ShowInformation("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.", am.myWindow)
		}
	})

	cancelBtn := widget.NewButton("–û—Ç–º–µ–Ω–∞", func() {
		configWin.Close()
	})

	buttons := container.NewHBox(saveBtn, cancelBtn)
	configWin.SetContent(container.NewBorder(nil, buttons, nil, nil, container.NewVScroll(entry)))
	configWin.Show()
}
